CREATE SEQUENCE IF NOT EXISTS SR_SEQUENCE START 1;

-- p326995_pm.oc_currency definition

CREATE TABLE oc_currency (
  currency_id bigint NOT NULL,
  title varchar(32) NOT NULL,
  code varchar(3) NOT NULL,
  symbol_left varchar(12) NOT NULL,
  symbol_right varchar(12) NOT NULL,
  decimal_place char(1) NOT NULL,
  value numeric(15,8) NOT NULL,
  status int NOT NULL,
  date_modified timestamp NOT NULL,
  PRIMARY KEY (currency_id)
);

CREATE TABLE oc_language (
  language_id int NOT NULL,
  name varchar(32) NOT NULL,
  code varchar(5) NOT NULL,
  locale varchar(255) NOT NULL,
  image varchar(64) NOT NULL,
  directory varchar(32) NOT NULL,
  sort_order int NOT NULL DEFAULT '0',
  status int NOT NULL,
  PRIMARY KEY (language_id)
 );

CREATE TABLE oc_ll_cdek_city (
  CityCode bigint NOT NULL,
  region_id bigint NOT NULL,
  country_id bigint NOT NULL,
  CountryCode bigint NOT NULL,
  CityName varchar(255) DEFAULT NULL,
  EngName varchar(255) DEFAULT NULL,
  FullName varchar(255) DEFAULT NULL,
  EngFullName varchar(255) DEFAULT NULL,
  Center varchar(255) DEFAULT NULL,
  PostCodeList varchar(255) DEFAULT NULL,
  NalSumLimit varchar(255) DEFAULT NULL,
  FullNameFIAS varchar(255) DEFAULT NULL,
  FIAS varchar(255) DEFAULT NULL,
  KLADR varchar(255) DEFAULT NULL,
  cityDD bigint DEFAULT NULL,
  pvzCode varchar(255) DEFAULT NULL,
  PRIMARY KEY (CityCode)
);

CREATE TABLE IF NOT EXISTS OC_COUNTRY (
  COUNTRY_ID BIGINT NOT NULL,
  NAME VARCHAR(128) NOT NULL,
  ISO_CODE_2 VARCHAR(2) NOT NULL,
  ISO_CODE_3 VARCHAR(3) NOT NULL,
  ADDRESS_FORMAT TEXT NOT NULL,
  POSTCODE_REQUIRED INT NOT NULL,
  STATUS INT NOT NULL DEFAULT 1,
  PRIMARY KEY (COUNTRY_ID)
);

CREATE UNIQUE INDEX IF NOT EXISTS OC_COUNTRY_ISO_CODE_2_UNIQ ON OC_COUNTRY(ISO_CODE_2);

CREATE TABLE IF NOT EXISTS OC_MANUFACTURER (
  MANUFACTURER_ID BIGINT NOT NULL,
  NAME VARCHAR(64) NOT NULL,
  IMAGE VARCHAR(255) DEFAULT NULL,
  SORT_ORDER INT NOT NULL,
  COUNTRY_BRAND VARCHAR(128) DEFAULT NULL,
  COUNTRY_ORIGIN VARCHAR(128) DEFAULT NULL,
  PRIMARY KEY (MANUFACTURER_ID)
 );

 CREATE TABLE IF NOT EXISTS OC_PRODUCT (
   PRODUCT_ID BIGINT NOT NULL,
   MODEL VARCHAR(64) NOT NULL,
   SKU VARCHAR(64) NOT NULL,
   UPC VARCHAR(12) NOT NULL,
   EAN VARCHAR(14) NOT NULL,
   JAN VARCHAR(13) NOT NULL,
   ISBN VARCHAR(17) NOT NULL,
   MPN VARCHAR(64) NOT NULL,
   LOCATION VARCHAR(128) NOT NULL,
   QUANTITY INT NOT NULL DEFAULT 0,
   STOCK_STATUS_ID BIGINT NOT NULL,
   IMAGE VARCHAR(255) DEFAULT NULL,
   MANUFACTURER_ID BIGINT NOT NULL,
   SHIPPING INT NOT NULL DEFAULT 1,
   PRICE NUMERIC(15,4) NOT NULL DEFAULT 0.0000,
   POINTS INT NOT NULL DEFAULT 0,
   TAX_CLASS_ID INT NOT NULL,
   DATE_AVAILABLE TIMESTAMP NOT NULL DEFAULT CURRENT_DATE,
   WEIGHT NUMERIC(15,8) NOT NULL DEFAULT 0.00000000,
   WEIGHT_CLASS_ID INT NOT NULL DEFAULT 0,
   LENGTH NUMERIC(15,8) NOT NULL DEFAULT 0.00000000,
   WIDTH NUMERIC(15,8) NOT NULL DEFAULT 0.00000000,
   HEIGHT NUMERIC(15,8) NOT NULL DEFAULT 0.00000000,
   LENGTH_CLASS_ID INT NOT NULL DEFAULT 0,
   SUBTRACT INT NOT NULL DEFAULT 1,
   MINIMUM INT NOT NULL DEFAULT 1,
   SORT_ORDER INT NOT NULL DEFAULT 0,
   STATUS INT NOT NULL DEFAULT 0,
   VIEWED INT NOT NULL DEFAULT 0,
   DATE_ADDED TIMESTAMP NOT NULL,
   DATE_MODIFIED TIMESTAMP NOT NULL,
   CATEGORY_GROUP_ID INT DEFAULT 0,
   COMPOSITE INT DEFAULT 0,
   DELIVERY_NAME VARCHAR(255) DEFAULT NULL,
   PRIMARY KEY (PRODUCT_ID)
 );

 CREATE TABLE IF NOT EXISTS OC_PRODUCT_DESCRIPTION (
   PRODUCT_ID BIGINT NOT NULL,
   LANGUAGE_ID INT NOT NULL,
   NAME VARCHAR(255) NOT NULL,
   DESCRIPTION TEXT NOT NULL,
   TAG TEXT NOT NULL,
   META_TITLE VARCHAR(255) NOT NULL,
   META_DESCRIPTION VARCHAR(255) NOT NULL,
   META_KEYWORD VARCHAR(255) NOT NULL,
   PRIMARY KEY (PRODUCT_ID, LANGUAGE_ID)
 );

CREATE TABLE IF NOT EXISTS OC_PRODUCT_SPECIAL (
  PRODUCT_SPECIAL_ID BIGINT NOT NULL,
  PRODUCT_ID BIGINT NOT NULL,
  CUSTOMER_GROUP_ID INT NOT NULL,
  PRIORITY INT NOT NULL DEFAULT 1,
  PRICE NUMERIC(15,4) NOT NULL DEFAULT 0.0000,
  DATE_START TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  DATE_END TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (PRODUCT_SPECIAL_ID)
);

 CREATE TABLE IF NOT EXISTS SR_PRODUCT_COMPOSITE (
 	ID BIGINT NOT NULL,
     MASTER_PRODUCT_ID INT NOT NULL,
 	SLAVE_PRODUCT_ID VARCHAR(30) NOT NULL,
     SLAVE_QUANTITY INT NOT NULL, /* КОЛИЧЕСТВО ТОВАРА В КОМПЛЕКТЕ */
     SLAVE_TYPE INT NOT NULL, /* ТИП СВЯЗКИ */
     CONSTRAINT SR_PRODUCT_COMPOSITE_UQ UNIQUE (MASTER_PRODUCT_ID, SLAVE_PRODUCT_ID, SLAVE_TYPE),
 	PRIMARY KEY(ID)
 );

----------------------------


CREATE TABLE IF NOT EXISTS SR_SYS_USER (
  ID BIGINT NOT NULL,
  NAME VARCHAR(64) NOT NULL,
  PASSWORD VARCHAR(100) NOT NULL,
  EMAIL VARCHAR(100) NOT NULL,
  ENABLED INT NOT NULL DEFAULT 1,
  LAST_LOGIN TIMESTAMP NULL,
  PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX IF NOT EXISTS SR_SYS_USER_NAME_UNIQ ON SR_SYS_USER(NAME);

COMMENT ON TABLE SR_SYS_USER IS 'SR_SYS_USER';
COMMENT ON COLUMN SR_SYS_USER.ID IS 'PRIMARY KEY';
COMMENT ON COLUMN SR_SYS_USER.NAME IS 'USER NAME';
COMMENT ON COLUMN SR_SYS_USER.PASSWORD IS 'USER PASSWORD';
COMMENT ON COLUMN SR_SYS_USER.EMAIL IS 'EMAIL';
COMMENT ON COLUMN SR_SYS_USER.ENABLED IS 'ENABLED';
COMMENT ON COLUMN SR_SYS_USER.LAST_LOGIN IS 'LAST LOGIN';

CREATE TABLE IF NOT EXISTS SR_SYS_ROLE (
	ID BIGINT NOT NULL,
	NAME VARCHAR(50) NOT NULL,
    PRIMARY KEY (ID)
);
CREATE UNIQUE INDEX IF NOT EXISTS SR_SYS_ROLE_NAME_UNIQ ON SR_SYS_ROLE(NAME);

CREATE TABLE IF NOT EXISTS SR_SYS_USER_ROLES (
	ID BIGINT NOT NULL,
	USER_ID BIGINT NOT NULL,
	ROLE_ID BIGINT NOT NULL,
    PRIMARY KEY (ID)
);
ALTER TABLE SR_SYS_USER_ROLES ADD CONSTRAINT FK_SR_SYS_ROLES_USER_ID FOREIGN KEY (USER_ID) REFERENCES SR_SYS_USER(ID);
ALTER TABLE SR_SYS_USER_ROLES ADD CONSTRAINT FK_SR_SYS_ROLES_ROLE_ID FOREIGN KEY (ROLE_ID) REFERENCES SR_SYS_ROLE(ID);

/* КОНФИГУРАТОР */
CREATE TABLE IF NOT EXISTS SR_SYS_CONFIG (
	CODE VARCHAR(255) NOT NULL, /* ПАРАМЕТР */
	VALUE VARCHAR(255) NOT NULL /* ЗНАЧЕНИЕ */,
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(CODE)
);

/* ВНЕШНИЕ ПОКАЗАТЕЛИ ДЛЯ РАСЧЕТОВ */
CREATE TABLE IF NOT EXISTS SR_SYS_TOTAL_AMOUNT (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

/*-------------------------------------------------------------*/
/*                 ПОЛЬЗОВАТЕЛЬСКИЕ СПРАВОЧНИКИ                */
/*-------------------------------------------------------------*/

/* СТАТУСЫ ПОКУПАТЕЛЕЙ */
CREATE TABLE IF NOT EXISTS SR_WIKI_CUSTOMER_TYPE (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

/* СТАТУСЫ ПОКУПАТЕЛЕЙ */
CREATE TABLE IF NOT EXISTS SR_WIKI_CUSTOMER_STATUS (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

/* ТИПЫ АДРЕСОВ */
CREATE TABLE IF NOT EXISTS SR_WIKI_ADDRESS_TYPE (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

-- ГОРОД	КОД	АДРЕС	ТЕЛЕФОНЫ	ГРАФИК РАБОТЫ	ИНДЕКС

/* ПВЗ СДЭК */
CREATE TABLE IF NOT EXISTS SR_WIKI_CDEK_PVZ (
    CODE VARCHAR(30) NOT NULL /* КОД ПВЗ */,
    CITY VARCHAR(255) NOT NULL /* ГОРОД */,
    ADDRESS VARCHAR(255) NOT NULL /* АДРЕС */,
    PHONES VARCHAR(255) NULL /* ТЕЛЕФОНЫ */,
    SCHEDULE_WORK VARCHAR(255) NULL /* РАСПИСАНИЕ РАБОТЫ */,
    POST_CODE VARCHAR(10) NULL /* ИНДЕКС */,
	PRIMARY KEY(CODE)
);
CREATE UNIQUE INDEX IF NOT EXISTS SR_WIKI_CDEK_PVZ_CITY_INDEX ON SR_WIKI_CDEK_PVZ (CITY);

/* ТИПЫ КОНТАКТОВ */
CREATE TABLE IF NOT EXISTS SR_WIKI_CONTACT_TYPE (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

/* ТИПЫ ИСТОЧНИКОВ ЗАКАЗОВ */
CREATE TABLE IF NOT EXISTS SR_WIKI_ORDER_SOURCE (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

/* ТИПЫ ПРИВЛЕЧЕНИЯ КЛИЕНТОВ */
CREATE TABLE IF NOT EXISTS SR_WIKI_ORDER_ADVERT (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

/* ТИПЫ ЗАКАЗОВ */
CREATE TABLE IF NOT EXISTS SR_WIKI_ORDER_TYPE (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

/* ТИПЫ ОПЛАТЫ ЗАКАЗОВ */
CREATE TABLE SR_WIKI_ORDER_PAYMENT (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

/* ТИПЫ ОПЛАТЫ ДОСТАВКИ ЗАКАЗОВ */
CREATE TABLE SR_WIKI_ORDER_PAYMENT_DELIVERY (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

/* СТАТУСЫ ЗАКАЗОВ */
CREATE TABLE SR_WIKI_ORDER_STATUS (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

/* СТАТУСЫ EMAIL ЗАКАЗОВ */
CREATE TABLE SR_WIKI_ORDER_EMAIL_STATUS (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

/* ТИПЫ КОМЕНТАРИЕВ */
CREATE TABLE SR_WIKI_ORDER_COMMENT_TYPE (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

/* НИШИ ТОВАРОВ */
CREATE TABLE SR_WIKI_CATEGORY_PRODUCT (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	TYPE_GROUP VARCHAR(255) NOT NULL, /* ГРУППА НИШ */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);
CREATE INDEX SR_WIKI_CATEGORY_PRODUCT_ANNOTATION_INDEX ON SR_WIKI_CATEGORY_PRODUCT (ANNOTATION);

/* СПИСОК ВНЕШНИХ СИСТЕМ */
CREATE TABLE SR_WIKI_CRM (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

/* СПИСОК СТАТУСОВ ОБРАБОТКИ ЗАПИСЕЙ ИЗ ВНЕШНИХ СИСТЕМ */
CREATE TABLE IF NOT EXISTS SR_WIKI_CRM_STATUS (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);


/*-------------------------------------------------------------*/
/*                ПОЛЬЗОВАТЕЛЬСКИЕ СПРАВОЧНИКИ                 */
/*-------------------------------------------------------------*/

/* СПОСОБЫ ДОСТАВКИ */
CREATE TABLE IF NOT EXISTS SR_WIKI_ORDER_DELIVERY (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	CATEGORY VARCHAR(255) NOT NULL, /* КАТЕГОРИЯ */
	ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

/* ТАРИФЫ ДОСТАВКИ */
CREATE TABLE IF NOT EXISTS SR_WIKI_ORDER_DELIVERY_PRICE (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	DELIVERY_ID INT NOT NULL, /* ИДЕНТИФИКАТОР SR_WIKI_ORDER_DELIVERY.ID */
	ANNOTATION VARCHAR(255) NULL /* ОПИСАНИЕ */,
	PRICE DECIMAL(15,4) NOT NULL, /* ЗНАЧЕНИЕ ТАРИФА */
	PRIMARY KEY(ID)
);

ALTER TABLE SR_WIKI_ORDER_DELIVERY_PRICE
    ADD CONSTRAINT FK_SR_WIKI_ORDER_DELIVERY_PRICE_DELIVERY_ID FOREIGN KEY (DELIVERY_ID)
    REFERENCES SR_WIKI_ORDER_DELIVERY (ID);

/* SR_WIKI_COMMENT_TYPE */
CREATE TABLE IF NOT EXISTS SR_WIKI_COMMENT_TYPE (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
	ANNOTATION VARCHAR(255) NULL /* ОПИСАНИЕ */,	
	PRIMARY KEY(ID)
);   
   
   
CREATE TABLE IF NOT EXISTS SR_WIKI_STOCK (
ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

CREATE TABLE IF NOT EXISTS SR_WIKI_SUPPLIER (
ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
ANNOTATION VARCHAR(255) NOT NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

CREATE TABLE IF NOT EXISTS SR_WIKI_STOCK_SUPPLIER (
ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
STOCK_ID INT NOT NULL,
SUPPLIER_ID INT NOT NULL,
	CONSTRAINT SR_WIKI_STOCK_SUPPLIER_UQ UNIQUE (STOCK_ID, SUPPLIER_ID),
	PRIMARY KEY(ID)
);

ALTER TABLE SR_WIKI_STOCK_SUPPLIER
    ADD CONSTRAINT FK_SR_WIKI_STOCK_SUPPLIER_STOCK_ID FOREIGN KEY (STOCK_ID)
    REFERENCES SR_WIKI_STOCK (ID);

ALTER TABLE SR_WIKI_STOCK_SUPPLIER
    ADD CONSTRAINT FK_SR_WIKI_STOCK_SUPPLIER_SUPPLIER_ID FOREIGN KEY (SUPPLIER_ID)
    REFERENCES SR_WIKI_SUPPLIER (ID);

/*-------------------------------------------------------------*/
/*                          ДАННЫЕ                             */
/*-------------------------------------------------------------*/

/* ЧЕЛОВЕК */
CREATE TABLE IF NOT EXISTS SR_PERSON (
	ID INT NOT NULL, /* ИДЕНТИФИКАТОР */
    FIRST_NAME VARCHAR(255) NOT NULL, /* ИМЯ */
    LAST_NAME VARCHAR(255) NULL, /* ФАМИЛИЯ */
    MIDDLE_NAME VARCHAR(255) NULL, /* ОТЧЕСТВО */
    COUNTRY_ISO_CODE_2 CHAR(2) DEFAULT 'RU' NOT NULL,
	PHONE_NUMBER VARCHAR(30) NULL, /* (999) 111-11-11 */
    EMAIL VARCHAR(255) NULL, /* A@A.RU */
    CONSTRAINT SR_PERSON_UQ UNIQUE (COUNTRY_ISO_CODE_2, PHONE_NUMBER, EMAIL),
	PRIMARY KEY(ID)
);

ALTER TABLE SR_PERSON
    ADD CONSTRAINT FK_SR_PERSON_ISO_CODE_2 FOREIGN KEY (COUNTRY_ISO_CODE_2)
    REFERENCES OC_COUNTRY (ISO_CODE_2);

/* АДРЕС */
CREATE TABLE SR_ADDRESS (
	ID BIGINT NOT NULL, /* ИДЕНТИФИКАТОР */
    TYPE INT DEFAULT 1 NOT NULL, /* ТИП */
    COUNTRY_ISO_CODE_2 CHAR(2) DEFAULT 'RU' NOT NULL,
    POST_CODE VARCHAR(6) NULL, /* ИНДЕКС */
    CITY_ID BIGINT NULL, /* ИДЕНТИФИКАТОР ГОРОДА СДЭК */
	CITY VARCHAR(255) NULL, /* ГОРОД (КОНТЕКСТ) */
	PVZ VARCHAR(255) NULL, /* ПУНКТ ВЫДАЧИ */
    PVZ_ID VARCHAR(20) NULL, /* ИДЕНТИФИКАТОР ПУНКТА ВЫДАЧИ / DELIVERYVARIANTID */
    STREET VARCHAR(255) NULL, /* УЛИЦА */
    HOUSE VARCHAR(255) NULL, /* ДОМ */
    FLAT VARCHAR(255) NULL, /* КВАРТИРА/ОФИС */
	ADDRESS VARCHAR(255) NULL, /* АДРЕС */
	SUBWAY_STATION VARCHAR(255) NULL, /* СТАНЦИЯ МЕТРО */
	ANNOTATION VARCHAR(255) NULL /* ОПИСАНИЕ */,
	PRIMARY KEY(ID)
);

ALTER TABLE SR_ADDRESS
    ADD CONSTRAINT FK_SR_ADDRESS_TYPE FOREIGN KEY (TYPE)
    REFERENCES SR_WIKI_ADDRESS_TYPE (ID);

ALTER TABLE SR_ADDRESS
    ADD CONSTRAINT FK_SR_ADDRESS_ISO_CODE_2 FOREIGN KEY (COUNTRY_ISO_CODE_2)
    REFERENCES OC_COUNTRY (ISO_CODE_2);

/* ПРИМЕРЫ АДРЕСОВ
ДОСТАВКА КУРЬЕРОМ: Г. МОСКВА, СТОЛЕШНИКОВ ПЕРЕУЛОК Д.15 КВ.15
ДОСТАВКА КУРЬЕРОМ: МО, ИСТРА, ДАЧНЫЙ ПОСЕЛОК Д.15
ПОЧТА РОССИИ: 662971, КРАСНОЯРСКИЙ КРАЙ, ЖЕЛЕЗНОГОРСК Г. УЛИЦА ЛЕНИНА ДОМ 30 КВ 33
СДЭК, ДО ПВЗ: Г. КАЗАНЬ, УЛ. ГВАРДЕЙСКАЯ
СДЭК, ДО АДРЕСА: Г. МОСКВА, СТОЛЕШНИКОВ ПЕРЕУЛОК Д.15 КВ.15
ДЕЛОВЫЕ ЛИНИИ: Г.ТУЛА, ДО ТЕРМИНАЛА
САМОВЫВОЗ
*/

/* КЛИЕНТ */
CREATE TABLE SR_CUSTOMER (
	ID BIGINT NOT NULL, /* ИДЕНТИФИКАТОР */
    TYPE INT DEFAULT 1 NOT NULL, /* ТИП */
	PERSON_ID BIGINT NULL, /* ПЕРСОНА */
    STATUS INT DEFAULT 1 NOT NULL, /* СТАТУС */
	DATE_ADDED TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, /* ДАТА СОЗДАНИЯ */
    PRIMARY KEY (ID)
);

ALTER TABLE SR_CUSTOMER
    ADD CONSTRAINT FK_SR_CUSTOMER_PERSON_ID FOREIGN KEY (PERSON_ID)
    REFERENCES SR_PERSON (ID);

ALTER TABLE SR_CUSTOMER
    ADD CONSTRAINT FK_SR_CUSTOMER_TYPE FOREIGN KEY (TYPE)
    REFERENCES SR_WIKI_CUSTOMER_TYPE (ID);

ALTER TABLE SR_CUSTOMER
    ADD CONSTRAINT FK_SR_CUSTOMER_STATUS FOREIGN KEY (STATUS)
    REFERENCES SR_WIKI_CUSTOMER_STATUS (ID);

/* СВЯЗКИ АДРЕСОВ И КЛИЕНТОВ */
CREATE TABLE SR_CUSTOMER_ADDRESS (
	ID BIGINT NOT NULL, /* ИДЕНТИФИКАТОР */
	ADDRESS_ID BIGINT NOT NULL, /* ADDRESS.ID */
    CUSTOMER_ID BIGINT NOT NULL, /* CUSTOMER_ID.ID */
    CONSTRAINT SR_CUSTOMER_ADDRESS_UQ UNIQUE (CUSTOMER_ID, ADDRESS_ID),
	PRIMARY KEY (ID)
);

ALTER TABLE SR_CUSTOMER_ADDRESS
    ADD CONSTRAINT FK_SR_CUSTOMER_ADDRESS_ADDRESS_ID FOREIGN KEY (ADDRESS_ID)
    REFERENCES SR_ADDRESS (ID);

ALTER TABLE SR_CUSTOMER_ADDRESS
    ADD CONSTRAINT FK_SR_CUSTOMER_ADDRESS_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID)
    REFERENCES SR_CUSTOMER (ID);

CREATE INDEX SR_CUSTOMER_ADDRESS_CUSTOMER_ID_INDEX ON SR_CUSTOMER_ADDRESS (CUSTOMER_ID);

/* ОРГАНИЗАЦИИ ИЛИ ИП */
CREATE TABLE SR_CUSTOMER_COMPANY (
	ID BIGINT NOT NULL, /* ИДЕНТИФИКАТОР */
    CUSTOMER_ID BIGINT NOT NULL,
    COUNTRY_ISO_CODE_2 CHAR(2) DEFAULT 'RU' NOT NULL,
    INN VARCHAR(30) NULL, /* 123456789012 */
    SHORT_NAME VARCHAR(255) NOT NULL, /* КРАТКОЕ НАИМЕНОВАНИЕ */
    LONG_NAME VARCHAR(255) NULL, /* ПОЛНОЕ НАИМЕНОВАНИЕ */
    PRIMARY KEY (ID)
);

ALTER TABLE SR_CUSTOMER_COMPANY
    ADD CONSTRAINT FK_SR_CUSTOMER_COMPANY_ID FOREIGN KEY (CUSTOMER_ID)
    REFERENCES SR_CUSTOMER (ID);

ALTER TABLE SR_CUSTOMER_COMPANY
    ADD CONSTRAINT FK_SR_CUSTOMER_COMPANY_ISO_CODE_2 FOREIGN KEY (COUNTRY_ISO_CODE_2)
    REFERENCES OC_COUNTRY (ISO_CODE_2);

/* КОНТАКТЫ ДЛЯ ОРГАНИЗАЦИЙ */
CREATE TABLE SR_CUSTOMER_CONTACT (
	ID BIGINT NOT NULL, /* ИДЕНТИФИКАТОР */
    TYPE INT DEFAULT 1 NOT NULL, /* ТИП */
    CUSTOMER_ID BIGINT NOT NULL,
    PERSON_ID BIGINT NOT NULL,
    CONSTRAINT SR_CUSTOMER_CONTACT_UQ UNIQUE (CUSTOMER_ID, PERSON_ID),
    PRIMARY KEY (ID)
);

ALTER TABLE SR_CUSTOMER_CONTACT
    ADD CONSTRAINT FK_SR_CUSTOMER_CONTACT_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID)
    REFERENCES SR_CUSTOMER (ID);

ALTER TABLE SR_CUSTOMER_CONTACT
    ADD CONSTRAINT FK_SR_CUSTOMER_CONTACT_PERSON_ID FOREIGN KEY (PERSON_ID)
    REFERENCES SR_PERSON (ID);

ALTER TABLE SR_CUSTOMER_CONTACT
    ADD CONSTRAINT FK_SR_CUSTOMER_CONTACT_TYPE FOREIGN KEY (TYPE)
    REFERENCES SR_WIKI_CONTACT_TYPE (ID);

/* ЗАКАЗЫ КЛИЕНТОВ */
CREATE TABLE SR_ORDER (
	ID BIGINT NOT NULL, /* ИДЕНТИФИКАТОР */
    ORDER_NO BIGINT NOT NULL, /* НОМЕР ЗАКАЗА */
    ORDER_SUB_NO INT NULL, /* РАСШИРЕНИЕ НОМЕРА ЗАКАЗА */
    ORDER_YEAR INT DEFAULT 18 NOT NULL, /* ГОД */
    ORDER_DATE TIMESTAMP NOT NULL, /* ДАТА ЗАКАЗА */
    ORDER_TYPE INT DEFAULT 1 NOT NULL, /* ТИП ЗАКАЗА */
    SOURCE_TYPE INT DEFAULT 4 NOT NULL, /* ИСТОЧНИК */
	ADVERT_TYPE INT DEFAULT 1 NOT NULL, /* КАНАЛ ПРИВЛЕЧЕНИЯ */
    PAYMENT_TYPE INT DEFAULT 5 NOT NULL, /* ТИП ОПЛАТЫ */
    STORE_ID INT DEFAULT 1 NOT NULL, /* МАГАЗИН (1- SIR-RICHARD.RU, 2- PRIBORMASTER.RU) */
    CATEGORY_PRODUCT_ID INT DEFAULT 0 NOT NULL,
    CUSTOMER_ID BIGINT NOT NULL,
    AMOUNT_TOTAL NUMERIC(15,4) DEFAULT 0 NOT NULL, /* ИТОГОВАЯ СУММА ТОВАРА (БЕЗ УЧЕТА ДОСТАВКИ) */
	AMOUNT_TOTAL_WITH_DELIVERY NUMERIC(15,4) DEFAULT 0 NOT NULL, /* ИТОГОВАЯ СУММА К ОПЛАТЕ КЛИЕНТУ (РАВНА ИТОГОВОЙ ДЕТАЛИЗАЦИИ + СТОИМОСТИ ДОСТАВКИ)*/
	AMOUNT_BILL NUMERIC(15,4) DEFAULT 0 NOT NULL, /* СУММА ЧЕКА (НАШ ДОХОД) */
	AMOUNT_SUPPLIER NUMERIC(15,4) DEFAULT 0 NOT NULL, /* СТОИМОСТЬ ЗАКУПКИ */
	AMOUNT_MARGIN NUMERIC(15,4) DEFAULT 0 NOT NULL, /* ПРИБЫЛЬ ЗА ВЫЧЕТОМ НАЛОГОВ (AMOUNT_BILL - AMOUNT_SUPPLIER) */
	AMOUNT_POSTPAY NUMERIC(15,4) DEFAULT 0 NOT NULL, /* СТОИМОСТЬ ПОСТОПЛАТЫ */
	ANNOTATION VARCHAR(255) NULL /* ПРИМЕЧАНИЕ */,
    STATUS INT NOT NULL, /* ТЕКУЩИЙ СТАТУС */
    STATUS_EMAIL INT DEFAULT 0 NOT NULL, /* ТЕКУЩИЙ СТАТУС РАССЫЛОК */
    OFFER_COUNT_DAY INT NULL, /* ЧИСЛО ДНЕЙ СРОКА ПРЕДЛОЖЕНИЯ */
    OFFER_DATE_START TIMESTAMP NULL, /* ДАТА НАЧАЛА СРОКА ДЕЙСТВИЯ ПРЕДЛОЖЕНИЯ */
	DATE_ADDED TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, /* ДАТА СОЗДАНИЯ */
	USER_ADDED BIGINT DEFAULT 1 NOT NULL,
    DATE_MODIFIED TIMESTAMP NULL, /* ДАТА ИЗМЕНЕНИЯ */
    CONSTRAINT SR_ORDER_UQ UNIQUE (ORDER_NO, ORDER_SUB_NO, ORDER_YEAR),
	PRIMARY KEY (ID)
);

ALTER TABLE SR_ORDER
    ADD CONSTRAINT FK_SR_ORDER_TYPE FOREIGN KEY (ORDER_TYPE)
    REFERENCES SR_WIKI_ORDER_TYPE (ID);

ALTER TABLE SR_ORDER
    ADD CONSTRAINT FK_SR_ORDER_SOURCE_TYPE FOREIGN KEY (SOURCE_TYPE)
    REFERENCES SR_WIKI_ORDER_SOURCE (ID);

ALTER TABLE SR_ORDER
    ADD CONSTRAINT FK_SR_ORDER_ADVERT_TYPE FOREIGN KEY (ADVERT_TYPE)
    REFERENCES SR_WIKI_ORDER_ADVERT (ID);

ALTER TABLE SR_ORDER
    ADD CONSTRAINT FK_SR_ORDER_PAYMENT_TYPE FOREIGN KEY (PAYMENT_TYPE)
    REFERENCES SR_WIKI_ORDER_PAYMENT (ID);

ALTER TABLE SR_ORDER
    ADD CONSTRAINT FK_SR_ORDER_CATEGORY_PRODUCT_ID FOREIGN KEY (CATEGORY_PRODUCT_ID)
    REFERENCES SR_WIKI_CATEGORY_PRODUCT (ID);

ALTER TABLE SR_ORDER
    ADD CONSTRAINT FK_SR_ORDER_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID)
    REFERENCES SR_CUSTOMER (ID);

ALTER TABLE SR_ORDER
    ADD CONSTRAINT FK_SR_ORDER_USER_ADDED FOREIGN KEY (USER_ADDED)
    REFERENCES SR_SYS_USER (ID);

CREATE INDEX SR_ORDER_CUSTOMER_ID_INDEX ON SR_ORDER (CUSTOMER_ID);
CREATE INDEX SR_ORDER_ORDER_DATE_INDEX ON SR_ORDER (ORDER_DATE);


/* ДЕТАЛИЗАЦИЯ ЗАКАЗА */
CREATE TABLE SR_ORDER_ITEM (
	ID BIGINT NOT NULL, /* ИДЕНТИФИКАТОР */
    NO BIGINT DEFAULT 1 NOT NULL, /* ИДЕНТИФИКАТОР */
    ORDER_ID BIGINT NOT NULL,
    PRODUCT_ID BIGINT NOT NULL,
    PRICE NUMERIC(15,4) NOT NULL, /* ЦЕНА */
    QUANTITY INT DEFAULT 1 NOT NULL, /* КОЛИЧЕСТВО */
    DISCOUNT_RATE NUMERIC(15,4) NOT NULL, /* СКИДКА */
    AMOUNT NUMERIC(15,4) NOT NULL, /* ИТОГО */
	AMOUNT_SUPPLIER NUMERIC(15,4) NOT NULL, /* СТОИМОСТЬ ЗАКУПКИ */
    CONSTRAINT SR_ORDER_ITEM_UQ UNIQUE (ORDER_ID, NO),
	PRIMARY KEY (ID)
);

ALTER TABLE SR_ORDER_ITEM
    ADD CONSTRAINT FK_SR_ORDER_ITEM_ORDER_ID FOREIGN KEY (ORDER_ID)
    REFERENCES SR_ORDER (ID);

ALTER TABLE SR_ORDER_ITEM
    ADD CONSTRAINT FK_SR_ORDER_ITEM_PRODUCT_ID FOREIGN KEY (PRODUCT_ID)
    REFERENCES OC_PRODUCT (PRODUCT_ID);

CREATE INDEX SR_ORDER_ITEM_ORDER_ID_INDEX ON SR_ORDER_ITEM (ORDER_ID);

-- p326995_pm.sr_wiki_order_payment_delivery definition

CREATE TABLE sr_wiki_order_payment_delivery (
  id int NOT NULL,
  annotation varchar(255) NOT NULL,
  PRIMARY KEY (id)
);

/* ДОСТАВКА ЗАКАЗА */
CREATE TABLE SR_ORDER_DELIVERY (
	ID BIGINT NOT NULL, /* ИДЕНТИФИКАТОР */
    ORDER_ID BIGINT NOT NULL, /* ССЫЛКА НА ЗАКАЗ */
    DELIVERY_TYPE INT DEFAULT 301, /* СПОСОБ ДОСТАВКИ */
    PAYMENT_DELIVERY_TYPE INT DEFAULT 1 NOT NULL, /* ТИП ОПЛАТЫ ДОСТАВКИ (ПОКУПАТЕЛЬ, ПРОДАВЕЦ) */
    ADDRESS_ID BIGINT NOT NULL, /* АДРЕС ДОСТАВКИ */
    RECIPIENT_ID BIGINT NULL, /* ПОЛУЧАТЕЛЬ, ПО УМОЛЧАНИЮ, ЭТО ЗАКАЗЧИК */
    DATE_DELIVERY TIMESTAMP NULL,
    TIME_IN TIMESTAMP NULL,
    TIME_OUT TIMESTAMP NULL,
    PRICE NUMERIC(15,4) NOT NULL, /* ЦЕНА ДОСТАВКИ */
    CUSTOMER_PRICE NUMERIC(15,4) NULL, /* СТОИМОСТЬ ДОСТАВКИ ДЛЯ ПОКУПАТЕЛЯ */
    SELLER_PRICE NUMERIC(15,4) NULL, /* СТОИМОСТЬ ДОСТАВКИ ДЛЯ ПРОДАВЦА */
    ANNOTATION VARCHAR(255) NULL, /* ОПИСАНИЕ */
    TRACK_CODE VARCHAR(255) null, /* ТРЭК-КОД ДЛЯ ОТСЛЕЖИВАНИЯ */
	PRIMARY KEY (ID)
);

ALTER TABLE SR_ORDER_DELIVERY
    ADD CONSTRAINT FK_SR_ORDER_DELIVERY_ORDER_ID FOREIGN KEY (ORDER_ID)
    REFERENCES SR_ORDER (ID);

ALTER TABLE SR_ORDER_DELIVERY
    ADD CONSTRAINT FK_SR_ORDER_DELIVERY_TYPE FOREIGN KEY (DELIVERY_TYPE)
    REFERENCES SR_WIKI_ORDER_DELIVERY (ID);
   
ALTER TABLE SR_ORDER_DELIVERY
    ADD CONSTRAINT FK_SR_ORDER_DELIVERY_PAYMENT_TYPE FOREIGN KEY (PAYMENT_DELIVERY_TYPE)
    REFERENCES SR_WIKI_order_payment_delivery (ID);   

ALTER TABLE SR_ORDER_DELIVERY
    ADD CONSTRAINT FK_SR_ORDER_ADDRESS_ID FOREIGN KEY (ADDRESS_ID)
    REFERENCES SR_ADDRESS (ID);

ALTER TABLE SR_ORDER_DELIVERY
    ADD CONSTRAINT FK_SR_ORDER_RECIPIENT_ID FOREIGN KEY (RECIPIENT_ID)
    REFERENCES SR_PERSON (ID);

CREATE INDEX SR_ORDER_DELIVERY_ORDER_ID_INDEX ON SR_ORDER_DELIVERY (ORDER_ID);

/* СТАТУСЫ ЗАКАЗА */
CREATE TABLE SR_ORDER_STATUS (
	ID BIGINT NOT NULL, /* ИДЕНТИФИКАТОР */
    ORDER_ID BIGINT NOT NULL, /* ССЫЛКА НА ЗАКАЗ */
    STATUS INT NOT NULL, /* СТАТУС */
    CRM_STATUS  VARCHAR(128) NULL, /* СТАТУС CRM */
    CRM_SUB_STATUS VARCHAR(128) NULL, /* ЭТАП ОБРАБОТКИ CRM */
	DATE_ADDED TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, /* ДАТА СОЗДАНИЯ */
	USER_ADDED BIGINT DEFAULT 1 NOT NULL, /* 1- AL, 2- LARA */
	PRIMARY KEY (ID)
);

ALTER TABLE SR_ORDER_STATUS
    ADD CONSTRAINT FK_SR_ORDER_STATUS_ORDER_ID FOREIGN KEY (ORDER_ID)
    REFERENCES SR_ORDER (ID);

ALTER TABLE SR_ORDER_STATUS
    ADD CONSTRAINT FK_SR_ORDER_STATUS_STATUS FOREIGN KEY (STATUS)
    REFERENCES SR_WIKI_ORDER_STATUS (ID);

CREATE INDEX SR_ORDER_STATUS_ORDER_ID_INDEX ON SR_ORDER_STATUS (ORDER_ID);

/* КОМЕНТАРИИ К ЗАКАЗУ */
CREATE TABLE SR_ORDER_COMMENT (
	ID BIGINT NOT NULL, /* ИДЕНТИФИКАТОР */
    ORDER_ID BIGINT NOT NULL, /* ССЫЛКА НА ЗАКАЗ */
    COMMENT_TYPE BIGINT NOT NULL, /* ТИП 1- КОМЕНТАРИЙ, 2- КОНВЕРТЕР */
    CODE VARCHAR(30) NOT NULL, /* КЛЮЧ */
    VALUE VARCHAR(255) NULL, /* ОПИСАНИЕ */
	PRIMARY KEY (ID)
);

ALTER TABLE SR_ORDER_COMMENT
    ADD CONSTRAINT FK_SR_ORDER_COMMENT_ORDER_ID FOREIGN KEY (ORDER_ID)
    REFERENCES SR_ORDER (ID);

ALTER TABLE SR_ORDER_COMMENT
    ADD CONSTRAINT FK_SR_SR_ORDER_COMMENT_COMMENT_TYPE FOREIGN KEY (COMMENT_TYPE)
    REFERENCES SR_WIKI_COMMENT_TYPE (ID);

CREATE INDEX SR_ORDER_COMMENT_ORDER_ID_INDEX ON SR_ORDER_COMMENT (ORDER_ID);

CREATE TABLE SR_ORDER_CRM_CONNECT (
	ID BIGINT NOT NULL, /* ИДЕНТИФИКАТОР */
    ORDER_ID BIGINT NOT NULL, /* ССЫЛКА НА ЗАКАЗ */
    CRM_ID BIGINT NOT NULL, /* ССЫЛКА НА  */
    PARENT_CRM_ID BIGINT DEFAULT 0 NOT NULL, /* ССЫЛКА НА ИДЕНТИФИКАТОР ЗАКАЗА ИЗ CRM */
    PARENT_CRM_CODE VARCHAR(30) NULL, /* НОМЕР ЗАКАЗА В CRM */
    CRM_STATUS INT NOT NULL, /* СТАТУС ОБРАБОТКИ */
	PRIMARY KEY (ID)
);

CREATE INDEX SR_ORDER_CRM_CONNECT_ORDER_ID_INDEX ON SR_ORDER_CRM_CONNECT (ORDER_ID);
CREATE INDEX SR_ORDER_CRM_CONNECT_PARENT_CRM_ID_INDEX ON SR_ORDER_CRM_CONNECT (CRM_ID, PARENT_CRM_ID);
CREATE INDEX SR_ORDER_CRM_CONNECT_PARENT_CRM_CODE_INDEX ON SR_ORDER_CRM_CONNECT (PARENT_CRM_CODE);

 /*  ИТОГОВЫЕ ПОКАЗАТЕЛИ ЗА ПЕРИОД */
 CREATE TABLE SR_PERIOD_TOTAL_AMOUNT (
	ID BIGINT NOT NULL, /* ИДЕНТИФИКАТОР */
    AMOUNT_TYPE INT NOT NULL, /* ТИП ПОКАЗАТЕЛЯ */
    PERIOD_IN TIMESTAMP NOT NULL, /* ПЕРИОД С  */
    PERIOD_OUT TIMESTAMP NOT NULL, /* ПЕРИОД ПО */
    AMOUNT NUMERIC(15,4) DEFAULT 0 NOT NULL, /* СУММА */
    PRIMARY KEY (ID)
);

ALTER TABLE SR_PERIOD_TOTAL_AMOUNT
    ADD CONSTRAINT FK_SR_PERIOD_TOTAL_AMOUNT_AMOUNT_TYPE FOREIGN KEY (AMOUNT_TYPE)
    REFERENCES SR_SYS_TOTAL_AMOUNT (ID);

CREATE TABLE SR_STOCK (
	ID BIGINT NOT NULL, /* ИДЕНТИФИКАТОР */
	PRODUCT_ID BIGINT NOT NULL,
    STOCK_ID INT NOT NULL,
    SUPPLIER_ID BIGINT NOT NULL,
    SUPPLIER_PRICE NUMERIC(15,4) NOT NULL, /* ЦЕНА ОПТА */
    QUANTITY INT DEFAULT 1 NOT NULL, /* КОЛИЧЕСТВО НА СКЛАДЕ */
    SUPPLIER_QUANTITY INT DEFAULT 0 NOT NULL, /* КОЛИЧЕСТВО НА СКЛАДЕ ПОСТАВЩИКА */
    COMMENT VARCHAR(255) NULL, /* ОПИСАНИЕ */
    PRIMARY KEY (ID)
);

ALTER TABLE SR_STOCK
    ADD CONSTRAINT FK_SR_STOCK_PRODUCT_ID FOREIGN KEY (PRODUCT_ID)
    REFERENCES OC_PRODUCT (PRODUCT_ID);

ALTER TABLE SR_STOCK
    ADD CONSTRAINT FK_SR_STOCK_STOCK_ID FOREIGN KEY (STOCK_ID)
    REFERENCES SR_WIKI_STOCK (ID);

 ALTER TABLE SR_STOCK
    ADD CONSTRAINT FK_SR_STOCK_SUPPLIER_ID FOREIGN KEY (SUPPLIER_ID)
    REFERENCES SR_WIKI_SUPPLIER (ID);

/*-------------------------------------------------------------*/
/*                        ТАБЛИЦЫ ПОЛЬЗОВАТЕЛЕЙ                */
/*-------------------------------------------------------------*/

/* НАСТРОЙКИ ПОЛЬЗОВАТЕЛЯ */
CREATE TABLE SR_USER_QUERY (
	ID BIGINT NOT NULL, /* ИДЕНТИФИКАТОР */
    USER_ID BIGINT NOT NULL, /* ПОЛЬЗОВАТЕЛЬ */
    FORM VARCHAR(30) NOT NULL, /* ОПИСАНИЕ */
	CODE VARCHAR(255) NOT NULL, /* ПАРАМЕТР */
	VALUE VARCHAR(255) NOT NULL, /* ЗНАЧЕНИЕ */
    CONSTRAINT SR_USER_QUERY_UQ UNIQUE (USER_ID, FORM, CODE),
	PRIMARY KEY(ID)
);



CREATE or replace VIEW sr_v_product_light
AS
SELECT p.*, pd.name, pd.description product_description, 
       pd.meta_description product_meta_description, pd.meta_title product_meta_title, pd.meta_keyword product_meta_keyword
	FROM oc_product_description pd, oc_product p
    WHERE pd.product_id = p.product_id 
      AND pd.language_id = 2;
     
CREATE OR REPLACE VIEW sr_v_product
AS
SELECT p.product_id, p.model, p.delivery_name, pd.name, p.sku, p.quantity product_quantity, p.price product_price,
       p.image product_image, p.manufacturer_id, p.jan, p.isbn, p.mpn,
       pd.description product_description, 
       pd.meta_description product_meta_description, pd.meta_title product_meta_title, pd.meta_keyword product_meta_keyword,
	   cp.id category_id, cp.type_group category_group, cp.annotation category_annotation, 
       s.supplier_price, s.supplier_quantity supplier_quantity, s.quantity stock_quantity, s.supplier_id, p.status, p.category_group_id,
       weight, weight_class_id, length, width, height, composite
	FROM oc_product_description pd, oc_product p 
    LEFT OUTER JOIN sr_wiki_category_product cp ON (cp.id = p.category_group_id)
    LEFT OUTER JOIN sr_stock s ON (s.product_id = p.product_id)  
    LEFT OUTER JOIN oc_product_special ps ON (ps.product_id = p.product_id)  
    WHERE pd.product_id = p.product_id 
      AND pd.language_id = 2;
      -- AND p.status = 1;    
     
     
     

-- TEMPORARY DATA
CREATE SEQUENCE IF NOT EXISTS D_SEQUENCE START 1;

CREATE TABLE IF NOT EXISTS D_COFFEE (
  ID VARCHAR(100) NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS D_AIRCRAFT (
ID BIGINT NOT NULL PRIMARY KEY,
CALLSIGN VARCHAR(7),
SQUAWK VARCHAR(4),
REG VARCHAR(6),
FLIGHTNO VARCHAR(10),
ROUTE VARCHAR(25),
TYPE VARCHAR(4),
CATEGORY VARCHAR(2),
ALTITUDE INT,
HEADING INT,
SPEED INT,
VERT_RATE INT,
SELECTED_ALTITUDE INT,
LAT NUMERIC(20, 4),
LON NUMERIC(20, 4),
BAROMETER NUMERIC(20, 4),
POLAR_DISTANCE NUMERIC(20, 4),
POLAR_BEARING NUMERIC(20, 4),
ISADSB BOOLEAN,
IS_ON_GROUND BOOLEAN,
LAST_SEEN_TIME TIMESTAMP,
POS_UPDATE_TIME TIMESTAMP,
BDS40SEEN_TIME TIMESTAMP);


CREATE TABLE IF NOT EXISTS BP_DOCUMENTS (
  ID BIGINT PRIMARY KEY NOT NULL,
  CORRELATION_ID VARCHAR(64),
  DT_ID BIGINT NOT NULL,
  TRN VARCHAR(64) NOT NULL,
  PREP_DATE TIMESTAMP NOT NULL,
  SENDER_U_ID BIGINT NOT NULL,
  DOC_STEP VARCHAR(64) NOT NULL,
  RESULT_ID BIGINT NULL,
  RESULT_INFO VARCHAR(256) NULL,
  REC_STATUS CHAR(1) NOT NULL,
  CR_DT TIMESTAMP NOT NULL,
  UPD_DT TIMESTAMP NOT NULL);

COMMENT ON TABLE BP_DOCUMENTS IS 'DOCUMENTS';
COMMENT ON COLUMN BP_DOCUMENTS.ID IS 'PRIMARY KEY';
COMMENT ON COLUMN BP_DOCUMENTS.CORRELATION_ID IS 'END TO END ID LINKING SEVERAL RELATED DOCUMENT';
COMMENT ON COLUMN BP_DOCUMENTS.DT_ID IS 'REFERENCE TO DOCUMENT TYPES';
COMMENT ON COLUMN BP_DOCUMENTS.TRN IS 'UNIQUE DOCUMENT REFERENCE';
COMMENT ON COLUMN BP_DOCUMENTS.PREP_DATE IS 'PREPARATION DATE/TIME';
COMMENT ON COLUMN BP_DOCUMENTS.SENDER_U_ID IS 'REFERENCE TO THE USER-SENDER OF THE MESSAGE';
COMMENT ON COLUMN BP_DOCUMENTS.DOC_STEP IS 'DOCUMENT CURRENT PROCESSING STEP';
COMMENT ON COLUMN BP_DOCUMENTS.RESULT_ID IS 'DOCUMENT ERROR OR SUCCESS RESULT. REFERENCE TO RESULTS DICTIONARY';
COMMENT ON COLUMN BP_DOCUMENTS.RESULT_INFO IS 'RESULT ADDITIONAL INFORMATION';
COMMENT ON COLUMN BP_DOCUMENTS.REC_STATUS IS 'A – ACTIVE, D - DELETED';
COMMENT ON COLUMN BP_DOCUMENTS.CR_DT IS 'CREATION DATE';
COMMENT ON COLUMN BP_DOCUMENTS.UPD_DT IS 'MODIFICATION DATE';

--CHECK CONSTRAINTS
ALTER TABLE BP_DOCUMENTS ADD CONSTRAINT CC_DOCUMENTS_REC_STATUS CHECK (REC_STATUS IN ('A', 'D'));
